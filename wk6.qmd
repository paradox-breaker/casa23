# Google Earth Engine

## Summary

The week mainly focuses on Practical examples to analyze functions and operations that may be involved in remote sensing data processing using GEE.

### Loading Data

In this case, we select Landsat 8 Collection 2, T1, L2 data and filter it by time and region, using lt (less than) to select images with cloud cover below 10%.

![](image/wk6/load_code.jpg){width="329" height="50"}

After printing, the console shows the image count and their path-row numbers.

![](image/wk6/load_console.jpg){width="297"}

### Radiometric Calibration

Use regular expressions to filter images.

Different scaling factors are applied to reflectance and brightness temperature.

“True” indicates that the original image bands will be replaced.

![](image/wk6/calibration.jpg){width="363"}

### Visualizing Images

Here, the median of multiple images is computed.

min and max control image stretching:

Pixels with values ≤ min (≥ max) are mapped to the darkest (brightest) color.

Values in between are linearly stretched.

![](image/wk6/visualization%20code.jpg){width="359"}

![](image/wk6/visualization1.jpg){width="379"}

The image is modified to standard false color in the layer settings.

![](image/wk6/visualization2.jpg){width="377"}

### Mosaic images

The mosaic effect here is not ideal, as there is a noticeable stacking effect.

![](image/wk6/mosaic.jpg){width="369"}

### Clip images

![](image/wk6/clip.png){width="286"}

### Texture measures

Since the reflectance values are small, but .glcmTexture() requires integer values, the data needs to be stretched.

![](image/wk6/texture.png){width="244"}

Here, the values are multiplied by 1000.

{size: 1} specifies a 3×3 window is used.

Selected texture metrics: contrast and dissimilarity.

.toUint16() converts the data to 16-bit integers, as GLCM calculations cannot process 32-bit floating-point numbers.

![](image/wk6/texture_code.png){width="363"}

![](image/wk6/texture_result.png)

### PCA

Perform some preliminary setup.

meanDict.values(bandNames) extracts the mean of each band as a constant image (without spatial variation) for mean centering.

![](image/wk6/pca_code1.png){width="360"}

Then, start defining the function.

Convert the image so that each pixel contains an array storing multi-band values. The default image storage format is not suitable for direct matrix computations.

![](image/wk6/pca_code2.png){width="373"}

covar is an ee.Dictionary containing the covariance matrix and get('array') retrieves it.

covarArray.eigen() computes the eigenvalues and eigenvectors.

The result is then sliced using eigens.slice(1, 0, 1) (Dimension = 1 (slicing by rows);Start from row 0, excluding subsequent rows)

Converted into a 1D list, from which the total variance is calculated.

Finally, the variance contribution rate of each component is computed.

![](image/wk6/pca_code3.png){width="375"}

toArray(1) converts the 1D array into a 2D array (row-wise), making it suitable for matrixMultiply() computations.

.arrayFlatten(\[...\]) converts the array image into a regular image format, with a list defining the new band names.

Finally, extra dimensions in PrincipalComponents are removed, bands are renamed, and normalization is applied.

![](image/wk6/pca_code4.png){width="379"}

Ultimately, the first four principal components explain more than 99.5% of the variance.

![](image/wk6/pca.png){width="420"}

### NDVI

![](image/wk6/ndvi_code.png){width="404"}

![](image/wk6/ndvi_result.png){width="369"}

## Application

GEE is a platform for large-scale geospatial data processing and has a wide range of applications across multiple fields, including resource management, environmental monitoring, land use analysis, disaster response, and urban planning. @Sidhu01012018 utilized GEE to analyze land use changes in small terrestrial areas of Singapore by generating time series plots of the Enhanced Vegetation Index (EVI). Their study compared the effectiveness of EVI time series products derived from different data sources (MODIS and Landsat), analyzed the causes of EVI value variations, and discussed both the advantages of GEE and the challenges faced when conducting time series analysis on the platform.

The study results revealed that:

-   The Tuas industrial area has undergone rapid industrialization since 2006, primarily relying on land reclamation techniques for development. In contrast, the forest cover in the Central Catchment Area has remained unaffected by human activities, with EVI fluctuations aligning with the Southeast Asian monsoon cycle, indicating that vegetation changes are primarily driven by monsoonal variations.

-   MODIS, while having low spatial resolution, offers high temporal resolution, enabling frequent data acquisition. This makes it effective in capturing subtle land cover changes and seasonal trends. On the other hand, Landsat, despite its high spatial resolution, has poor temporal resolution, making it difficult to track complete change dynamics. Additionally, some dates suffer from data loss due to severe cloud cover.

-    Thanks to its MapReduce architecture, GEE demonstrates excellent spatial computing capabilities and can rapidly process imagery on a global scale. However, this very architecture also imposes limitations when simultaneously supporting both spatial and temporal analyses. During the Reduce phase—where data from different time points are integrated—a significant amount of data transmission occurs, increasing computational overhead. As a result, even for small terrestrial areas, processing data beyond a certain time range can lead to computation timeouts.

![Increase in Computation Time Until Timeout](image/wk6/runtime.png){width="384"}

## Reflection

Through the hands-on practice and literature review, it becomes evident that GEE offers numerous significant advantages, such as:

-   Built-in access to extensive remote sensing datasets: Users can directly access high-quality remote sensing data, such as Sentinel and Landsat, from the cloud without the need for time-consuming manual downloads and preprocessing. This significantly reduces both time costs and computational storage costs.

-   No need to manually set up a cloud computing environment: Unlike platforms such as GeoTrellis and SciDB, which require users to deploy their own servers or databases, GEE eliminates the need for any computational environment setup. This provides a major advantage for non-specialist users, allowing them to leverage cloud computing without having to learn complex big data processing tools, thus facilitating interdisciplinary research collaboration.

-   Provides APIs for direct large-scale data processing: GEE employs a parallel computing architecture that efficiently processes large-scale data. In spatial computations, GEE enables simultaneous calculations for all pixels rather than processing them individually. Additionally, GEE automatically allocates computing resources to optimize task execution. The API is also designed to be simple and efficient, enabling users to perform complex remote sensing analyses with minimal code effort.

It can be said that GEE is a truly research-friendly and efficient platform, backed by Google's technical support, ensuring continuous optimization and long-term development potential.

However, as mentioned earlier, GEE has limitations in time-series analysis. In the future, improvements to the MapReduce computing architecture could further enhance its ability to handle time-series analysis, reducing issues such as computational timeouts and improving overall processing efficiency.
